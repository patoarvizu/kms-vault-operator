version: 2.1

orbs:
  snyk: snyk/snyk@0.0.8

executors:
  vm:
    machine:
      image: ubuntu-2004:202111-02
    resource_class: large
    environment:
      GOPATH: /home/circleci/go
      VAULT_SKIP_VERIFY: 'true'
      GO111MODULE: "on"
      DOCKER_CLI_EXPERIMENTAL: enabled
      GOLANG_VERSION: 1.14.15
      NOTARY_VERSION: 0.6.1
      KUBECTL_VERSION: 1.21.5
    working_directory: /home/circleci/go/src/github.com/patoarvizu/kms-vault-operator
  vm-arm:
    machine:
      image: ubuntu-2004:202111-02
    resource_class: arm.medium
    environment:
      GOPATH: /home/circleci/go
      VAULT_SKIP_VERIFY: 'true'
      GO111MODULE: "on"
      DOCKER_CLI_EXPERIMENTAL: enabled
      GOLANG_VERSION: 1.14.15
      NOTARY_VERSION: 0.6.1
      KUBECTL_VERSION: 1.21.5
    working_directory: /home/circleci/go/src/github.com/patoarvizu/kms-vault-operator

jobs:
  test:
    executor: vm
    steps:
    - checkout
    - run:
        name: Install golang
        command: |
          sudo rm -rf /usr/local/go
          curl -Lo go.linux-amd64.tar.gz "https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz"
          sudo tar -C /usr/local -xzf go.linux-amd64.tar.gz
          mkdir -p ${HOME}/go/bin
          echo 'export PATH="$GOPATH/bin:$PATH"' >> "${BASH_ENV}"
    - run:
        name: Install kubectl
        command: |
          curl -Lo kubectl "https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          mkdir -p "${HOME}/.kube"
          touch "${HOME}/.kube/config"
    - run:
        name: Install k3d
        command: |
          wget -q -O - https://raw.githubusercontent.com/rancher/k3d/main/install.sh | TAG=v3.0.0 bash
    - run:
        name: Install Helm
        command: |
          wget https://get.helm.sh/helm-v3.3.1-linux-amd64.tar.gz
          tar -zxvf helm-v3.3.1-linux-amd64.tar.gz
          chmod +x linux-amd64/helm
          sudo mv linux-amd64/helm /usr/local/bin/
    - restore_cache:
        name: Restoring golang cache
        keys:
        - kms-vault-operator-golang-cache-{{ checksum "go.sum" }}
    - run:
        name: Build image
        command: |
          docker buildx create --name cci-builder --use
          docker buildx build --progress=plain --platform=linux/amd64 --load . -t patoarvizu/kms-vault-operator:latest
        no_output_timeout: 30m
    - snyk/scan:
        docker-image-name: patoarvizu/kms-vault-operator:latest
        fail-on-issues: true
        project: patoarvizu/kms-vault-operator
        severity-threshold: low
        additional-arguments: "--policy-path=.snyk"
    - run:
        name: Run all tests
        command: |
          export KUBECONFIG=~/.k3d/k3s-default-config
          k3d cluster create --image rancher/k3s:v1.0.0 --port 8200:30028@server[0] --wait
          k3d image import patoarvizu/kms-vault-operator:latest
          kubectl apply -f https://raw.githubusercontent.com/patoarvizu/common-manifests/master/prometheus-operator/crds.yaml
          kubectl apply -f https://raw.githubusercontent.com/patoarvizu/common-manifests/master/vault/vault-operator.yaml
          kubectl apply -f https://raw.githubusercontent.com/patoarvizu/common-manifests/master/cert-manager/cert-manager-v0.14.1.yaml
          kubectl rollout status -n cert-manager deployment/cert-manager-webhook -w
          kubectl apply -f https://raw.githubusercontent.com/patoarvizu/common-manifests/master/cert-manager/cluster-issuer.yaml
          kubectl apply -f https://raw.githubusercontent.com/patoarvizu/common-manifests/master/vault/vault-external-service.yaml
          kubectl apply -f https://raw.githubusercontent.com/patoarvizu/common-manifests/optimize-kms-vault-operator-build/vault/vault-cluster-v1.yaml
          while [ "$(kubectl -n vault get statefulset vault -o jsonpath={.status.readyReplicas})" != "1" ]; do
            sleep 1
          done
          kubectl -n vault create secret generic aws-secrets --from-literal=AWS_ACCESS_KEY_ID=$(echo $AWS_ACCESS_KEY_ID) --from-literal=AWS_SECRET_ACCESS_KEY=$(echo $AWS_SECRET_ACCESS_KEY)
          helm install kms-vault-operator helm/kms-vault-operator/ -n vault -f test/helm-values/values.yaml
          go test github.com/patoarvizu/kms-vault-operator/test/e2e -v -ginkgo.focus="With K/V v1 secrets"
          kubectl delete -f https://raw.githubusercontent.com/patoarvizu/common-manifests/optimize-kms-vault-operator-build/vault/vault-cluster-v1.yaml
          kubectl apply -f https://raw.githubusercontent.com/patoarvizu/common-manifests/optimize-kms-vault-operator-build/vault/vault-cluster-v2.yaml
          sleep 3
          while [ "$(kubectl -n vault get statefulset vault -o jsonpath={.status.readyReplicas})" != "1" ]; do
            sleep 1
          done
          go test github.com/patoarvizu/kms-vault-operator/test/e2e -v -ginkgo.focus="With K/V v2 secrets"
          helm upgrade kms-vault-operator ./helm/kms-vault-operator/ -n vault --set validatingWebhook.enabled=true --set validatingWebhook.certManager.injectSecret=true
          go test github.com/patoarvizu/kms-vault-operator/test/e2e -v -ginkgo.focus="With webhook"
    - save_cache:
        key: kms-vault-operator-golang-cache-{{ checksum "go.sum" }}
        paths:
          - /home/circleci/go/pkg/mod/cache

  build-and-push-amd64-image:
    executor: vm
    steps:
    - checkout
    - run:
        name: Install notary
        command: |
          curl -L https://github.com/theupdateframework/notary/releases/download/v${NOTARY_VERSION}/notary-Linux-amd64 -o notary
          chmod +x notary
          sudo mv notary /usr/local/bin
    - run:
        name: Log in to Docker Hub
        command: |
          docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_ACCESS_TOKEN
    - run:
        name: Build and push amd64 image
        command: |
          docker buildx create --name cci-builder --use
          echo $ENCODED_NOTARY_ROLE_KEY | base64 -d > ${HOME}/kms-vault-operator-circleci.key
          export NOTARY_DELEGATION_PASSPHRASE=$NOTARY_ROLE_PASSPHRASE
          notary -s https://notary.docker.io -d ~/.docker/trust key import ${HOME}/kms-vault-operator-circleci.key --role kms-vault-operator-circleci
          export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$NOTARY_DELEGATION_PASSPHRASE
          OPERATOR_BUILD_ARGS="--build-arg GIT_COMMIT=$CIRCLE_SHA1 --build-arg GIT_TAG=$CIRCLE_TAG --build-arg COMMIT_TIMESTAMP=$(git log -1 --format=%at) --build-arg AUTHOR_EMAIL=$(git log -1 --format=%ae) --build-arg SIGNATURE_KEY=$(git log -1 --format=%GK)"
          export DOCKER_CONTENT_TRUST=1
          VERSION=${CIRCLE_TAG:-latest}
          docker buildx build --progress=plain --platform=linux/amd64 --load $OPERATOR_BUILD_ARGS . -t patoarvizu/kms-vault-operator:latest-amd64 -t patoarvizu/kms-vault-operator:$CIRCLE_SHA1-amd64 -t patoarvizu/kms-vault-operator:$VERSION-amd64
          docker push patoarvizu/kms-vault-operator:latest-amd64
          docker push patoarvizu/kms-vault-operator:$CIRCLE_SHA1-amd64
          docker push patoarvizu/kms-vault-operator:$VERSION-amd64
        no_output_timeout: 30m

  build-arm64-image:
    executor: vm-arm
    steps:
    - checkout
    - restore_cache:
        name: Restoring buildx cache
        keys:
        - kms-vault-operator-arm64-buildx-cache-{{ checksum "Dockerfile" }}
    - run:
        name: Build arm64 image
        command: |
          docker buildx create --name cci-builder --use
          OPERATOR_BUILD_ARGS="--build-arg GIT_COMMIT=$CIRCLE_SHA1 --build-arg GIT_TAG=$CIRCLE_TAG --build-arg COMMIT_TIMESTAMP=$(git log -1 --format=%at) --build-arg AUTHOR_EMAIL=$(git log -1 --format=%ae) --build-arg SIGNATURE_KEY=$(git log -1 --format=%GK)"
          docker buildx build --progress=plain --platform=linux/arm64 --cache-to=type=local,dest=/tmp/latest-arm64-cache,mode=max --cache-from=type=local,src=/tmp/latest-arm64-cache $OPERATOR_BUILD_ARGS . -t patoarvizu/kms-vault-operator:latest-arm64
        no_output_timeout: 30m
    - persist_to_workspace:
        root: /tmp/
        paths:
        - latest-arm64-cache
    - save_cache:
        key: kms-vault-operator-arm64-buildx-cache-{{ checksum "Dockerfile" }}
        paths:
          - /tmp/latest-arm64-cache
        when: always

  push-arm64-image:
    executor: vm
    steps:
    - checkout
    - attach_workspace:
        at: /tmp/
    - restore_cache:
        name: Restoring buildx cache
        keys:
        - kms-vault-operator-arm64-buildx-cache-{{ checksum "Dockerfile" }}
    - run:
        name: Install notary
        command: |
          curl -L https://github.com/theupdateframework/notary/releases/download/v${NOTARY_VERSION}/notary-Linux-amd64 -o notary
          chmod +x notary
          sudo mv notary /usr/local/bin
    - run:
        name: Log in to Docker Hub
        command: |
          docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_ACCESS_TOKEN
    - run:
        name: Sign and push arm64 image
        command: |
          sudo apt-get update
          sudo apt-get install qemu-user -y
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --name cci-builder --use
          echo $ENCODED_NOTARY_ROLE_KEY | base64 -d > ${HOME}/kms-vault-operator-circleci.key
          export NOTARY_DELEGATION_PASSPHRASE=$NOTARY_ROLE_PASSPHRASE
          notary -s https://notary.docker.io -d ~/.docker/trust key import ${HOME}/kms-vault-operator-circleci.key --role kms-vault-operator-circleci
          export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$NOTARY_DELEGATION_PASSPHRASE
          OPERATOR_BUILD_ARGS="--build-arg GIT_COMMIT=$CIRCLE_SHA1 --build-arg GIT_TAG=$CIRCLE_TAG --build-arg COMMIT_TIMESTAMP=$(git log -1 --format=%at) --build-arg AUTHOR_EMAIL=$(git log -1 --format=%ae) --build-arg SIGNATURE_KEY=$(git log -1 --format=%GK)"
          export DOCKER_CONTENT_TRUST=1
          VERSION=${CIRCLE_TAG:-latest}
          docker buildx build --progress=plain --platform=linux/arm64 --cache-to=type=local,dest=/tmp/latest-arm64-cache,mode=max --cache-from=type=local,src=/tmp/latest-arm64-cache --load $OPERATOR_BUILD_ARGS . -t patoarvizu/kms-vault-operator:latest-arm64
          docker tag patoarvizu/kms-vault-operator:latest-arm64 patoarvizu/kms-vault-operator:$CIRCLE_SHA1-arm64
          docker tag patoarvizu/kms-vault-operator:latest-arm64 patoarvizu/kms-vault-operator:$VERSION-arm64
          docker push patoarvizu/kms-vault-operator:latest-arm64
          docker push patoarvizu/kms-vault-operator:$CIRCLE_SHA1-arm64
          docker push patoarvizu/kms-vault-operator:$VERSION-arm64
        no_output_timeout: 60m
    - save_cache:
        key: kms-vault-operator-arm64-buildx-cache-{{ checksum "Dockerfile" }}
        paths:
          - /tmp/latest-arm64-cache
        when: always

  build-arm7-image:
    executor: vm-arm
    steps:
    - checkout
    - restore_cache:
        name: Restoring buildx cache
        keys:
        - kms-vault-operator-arm7-buildx-cache-{{ checksum "Dockerfile" }}
    - run:
        name: Build arm7 image
        command: |
          docker buildx create --name cci-builder --use
          OPERATOR_BUILD_ARGS="--build-arg GIT_COMMIT=$CIRCLE_SHA1 --build-arg GIT_TAG=$CIRCLE_TAG --build-arg COMMIT_TIMESTAMP=$(git log -1 --format=%at) --build-arg AUTHOR_EMAIL=$(git log -1 --format=%ae) --build-arg SIGNATURE_KEY=$(git log -1 --format=%GK)"
          docker buildx build --progress=plain --platform=linux/arm/v7 --cache-to=type=local,dest=/tmp/latest-arm7-cache,mode=max --cache-from=type=local,src=/tmp/latest-arm7-cache $OPERATOR_BUILD_ARGS . -t patoarvizu/kms-vault-operator:latest-arm7
        no_output_timeout: 30m
    - persist_to_workspace:
        root: /tmp/
        paths:
        - latest-arm7-cache
    - save_cache:
        key: kms-vault-operator-arm7-buildx-cache-{{ checksum "Dockerfile" }}
        paths:
          - /tmp/latest-arm7-cache
        when: always

  push-arm7-image:
    executor: vm
    steps:
    - checkout
    - attach_workspace:
        at: /tmp/
    - restore_cache:
        name: Restoring buildx cache
        keys:
        - kms-vault-operator-arm7-buildx-cache-{{ checksum "Dockerfile" }}
    - run:
        name: Install notary
        command: |
          curl -L https://github.com/theupdateframework/notary/releases/download/v${NOTARY_VERSION}/notary-Linux-amd64 -o notary
          chmod +x notary
          sudo mv notary /usr/local/bin
    - run:
        name: Log in to Docker Hub
        command: |
          docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_ACCESS_TOKEN
    - run:
        name: Sign and push arm7 image
        command: |
          sudo apt-get update
          sudo apt-get install qemu-user -y
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --name cci-builder --use
          echo $ENCODED_NOTARY_ROLE_KEY | base64 -d > ${HOME}/kms-vault-operator-circleci.key
          export NOTARY_DELEGATION_PASSPHRASE=$NOTARY_ROLE_PASSPHRASE
          notary -s https://notary.docker.io -d ~/.docker/trust key import ${HOME}/kms-vault-operator-circleci.key --role kms-vault-operator-circleci
          export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$NOTARY_DELEGATION_PASSPHRASE
          OPERATOR_BUILD_ARGS="--build-arg GIT_COMMIT=$CIRCLE_SHA1 --build-arg GIT_TAG=$CIRCLE_TAG --build-arg COMMIT_TIMESTAMP=$(git log -1 --format=%at) --build-arg AUTHOR_EMAIL=$(git log -1 --format=%ae) --build-arg SIGNATURE_KEY=$(git log -1 --format=%GK)"
          export DOCKER_CONTENT_TRUST=1
          VERSION=${CIRCLE_TAG:-latest}
          docker buildx build --progress=plain --platform=linux/arm/v7 --cache-to=type=local,dest=/tmp/latest-arm7-cache,mode=max --cache-from=type=local,src=/tmp/latest-arm7-cache --load $OPERATOR_BUILD_ARGS . -t patoarvizu/kms-vault-operator:latest-arm7
          docker tag patoarvizu/kms-vault-operator:latest-arm7 patoarvizu/kms-vault-operator:$CIRCLE_SHA1-arm7
          docker tag patoarvizu/kms-vault-operator:latest-arm7 patoarvizu/kms-vault-operator:$VERSION-arm7
          docker push patoarvizu/kms-vault-operator:latest-arm7
          docker push patoarvizu/kms-vault-operator:$CIRCLE_SHA1-arm7
          docker push patoarvizu/kms-vault-operator:$VERSION-arm7
        no_output_timeout: 60m
    - save_cache:
        key: kms-vault-operator-arm7-buildx-cache-{{ checksum "Dockerfile" }}
        paths:
          - /tmp/latest-arm7-cache
        when: always

  push-combined-image:
    executor: vm
    steps:
    - checkout
    - run:
        name: Install notary
        command: |
          curl -L https://github.com/theupdateframework/notary/releases/download/v${NOTARY_VERSION}/notary-Linux-amd64 -o notary
          chmod +x notary
          sudo mv notary /usr/local/bin
    - run:
        name: Log in to Docker Hub
        command: |
          docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_ACCESS_TOKEN
    - run:
        name: Sign and push combined image
        command: |
          docker buildx create --name cci-builder --use
          echo $ENCODED_NOTARY_ROLE_KEY | base64 -d > ${HOME}/kms-vault-operator-circleci.key
          export NOTARY_DELEGATION_PASSPHRASE=$NOTARY_ROLE_PASSPHRASE
          notary -s https://notary.docker.io -d ~/.docker/trust key import ${HOME}/kms-vault-operator-circleci.key --role kms-vault-operator-circleci
          export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$NOTARY_DELEGATION_PASSPHRASE
          export DOCKER_CONTENT_TRUST=1
          VERSION=${CIRCLE_TAG:-latest}
          docker manifest create patoarvizu/kms-vault-operator:latest --amend patoarvizu/kms-vault-operator:latest-amd64 --amend patoarvizu/kms-vault-operator:latest-arm64 patoarvizu/kms-vault-operator:latest-arm7
          docker manifest push patoarvizu/kms-vault-operator:latest
          docker manifest create patoarvizu/kms-vault-operator:$CIRCLE_SHA1 --amend patoarvizu/kms-vault-operator:$CIRCLE_SHA1-amd64 --amend patoarvizu/kms-vault-operator:$CIRCLE_SHA1-arm64 patoarvizu/kms-vault-operator:$CIRCLE_SHA1-arm7
          docker manifest push patoarvizu/kms-vault-operator:$CIRCLE_SHA1
          docker manifest create patoarvizu/kms-vault-operator:$VERSION --amend patoarvizu/kms-vault-operator:$VERSION-amd64 --amend patoarvizu/kms-vault-operator:$VERSION-arm64 patoarvizu/kms-vault-operator:$VERSION-arm7
          docker manifest push patoarvizu/kms-vault-operator:$VERSION
          DIGEST=$(docker buildx imagetools inspect patoarvizu/kms-vault-operator:latest | grep Digest | cut -d':' -f3)
          LENGTH=$(( $(docker buildx imagetools inspect patoarvizu/kms-vault-operator:latest --raw | wc -c) - 1 ))
          export NOTARY_AUTH=$(echo $DOCKER_HUB_USER:$DOCKER_HUB_ACCESS_TOKEN | base64)
          notary -s https://notary.docker.io -d ~/.docker/trust addhash -p docker.io/patoarvizu/kms-vault-operator latest $LENGTH --sha256 $DIGEST -r targets/releases
          notary -s https://notary.docker.io -d ~/.docker/trust addhash -p docker.io/patoarvizu/kms-vault-operator $CIRCLE_SHA1 $LENGTH --sha256 $DIGEST -r targets/releases
          notary -s https://notary.docker.io -d ~/.docker/trust addhash -p docker.io/patoarvizu/kms-vault-operator $VERSION $LENGTH --sha256 $DIGEST -r targets/releases

workflows:
  version: 2
  build-operator:
    jobs:
    - test:
        context: authentication-tokens
        filters:
          tags:
            only: /^v\d+\.\d+.\d+$/
    - build-and-push-amd64-image:
        requires:
        - test
        context: authentication-tokens
        filters:
          tags:
            only: /^v\d+\.\d+.\d+$/
    - build-arm64-image:
        requires:
        - test
        filters:
          tags:
            only: /^v\d+\.\d+.\d+$/
    - push-arm64-image:
        requires:
        - build-arm64-image
        context: authentication-tokens
        filters:
          tags:
            only: /^v\d+\.\d+.\d+$/
    - build-arm7-image:
        requires:
        - test
        filters:
          tags:
            only: /^v\d+\.\d+.\d+$/
    - push-arm7-image:
        requires:
        - build-arm7-image
        context: authentication-tokens
        filters:
          tags:
            only: /^v\d+\.\d+.\d+$/
    - push-combined-image:
        requires:
        - build-and-push-amd64-image
        - push-arm64-image
        - push-arm7-image
        context: authentication-tokens
        filters:
          branches:
            ignore: /^.*$/
          tags:
            only: /^v\d+\.\d+.\d+$/